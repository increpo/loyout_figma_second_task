{
  "_from": "optimize-css-assets-webpack-plugin",
  "_id": "optimize-css-assets-webpack-plugin@5.0.3",
  "_inBundle": false,
  "_integrity": "sha512-q9fbvCRS6EYtUKKSwI87qm2IxlyJK5b4dygW1rKUBT6mMDhdG5e5bZT63v6tnJR9F9FB/H5a0HTmtw+laUBxKA==",
  "_location": "/optimize-css-assets-webpack-plugin",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "optimize-css-assets-webpack-plugin",
    "fetchSpec": "latest",
    "name": "optimize-css-assets-webpack-plugin",
    "raw": "optimize-css-assets-webpack-plugin",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/optimize-css-assets-webpack-plugin/-/optimize-css-assets-webpack-plugin-5.0.3.tgz",
  "_shasum": "e2f1d4d94ad8c0af8967ebd7cf138dcb1ef14572",
  "_shrinkwrap": null,
  "_spec": "optimize-css-assets-webpack-plugin",
  "_where": "/home/nur/github/loyout_figma_second_task",
  "author": {
    "name": "Nuno Rodrigues"
  },
  "bugs": {
    "url": "https://github.com/NMFR/optimize-css-assets-webpack-plugin/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "cssnano": "^4.1.10",
    "last-call-webpack-plugin": "^3.0.0"
  },
  "deprecated": false,
  "description": "A Webpack plugin to optimize \\ minimize CSS assets.",
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-jest": "^22.1.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "css-loader": "^3.0.0",
    "extract-text-webpack-plugin": "next",
    "jest": "^24.8.0",
    "style-loader": "^0.20.1",
    "webpack": "^4.9.1"
  },
  "homepage": "http://github.com/NMFR/optimize-css-assets-webpack-plugin",
  "jest": {
    "testEnvironment": "node",
    "watchPathIgnorePatterns": [
      "<rootDir>/test/js/*.*"
    ]
  },
  "keywords": [
    "CSS",
    "duplicate",
    "extract-text-webpack-plugin",
    "minimize",
    "optimize",
    "remove",
    "webpack"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "optimize-css-assets-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0"
  },
  "readme": "# Optimize CSS Assets Webpack Plugin\n\nA Webpack plugin to optimize \\ minimize CSS assets.\n\n## What does the plugin do?\n\nIt will search for CSS assets during the Webpack build and will optimize \\ minimize the CSS (by default it uses [cssnano](http://github.com/ben-eb/cssnano) but a custom CSS processor can be specified).\n\n### Solves [extract-text-webpack-plugin](http://github.com/webpack/extract-text-webpack-plugin) CSS duplication problem:\n\nSince [extract-text-webpack-plugin](http://github.com/webpack/extract-text-webpack-plugin) only bundles (merges) text chunks, if it's used to bundle CSS, the bundle might have duplicate entries (chunks can be duplicate free but when merged, duplicate CSS can be created).\n\n## Installation:\n\nUsing npm:\n```shell\n$ npm install --save-dev optimize-css-assets-webpack-plugin\n```\n\n> :warning: For webpack v3 or below please use `optimize-css-assets-webpack-plugin@3.2.0`. The `optimize-css-assets-webpack-plugin@4.0.0` version and above supports webpack v4.\n\n## Configuration:\n\nThe plugin can receive the following options (all of them are optional):\n* `assetNameRegExp`: A regular expression that indicates the names of the assets that should be optimized \\ minimized. The regular expression provided is run against the filenames of the files exported by the `ExtractTextPlugin` instances in your configuration, not the filenames of your source CSS files. Defaults to `/\\.css$/g`\n* `cssProcessor`: The CSS processor used to optimize \\ minimize the CSS, defaults to [`cssnano`](http://github.com/ben-eb/cssnano). This should be a function that follows `cssnano.process` interface (receives a CSS and options parameters and returns a Promise).\n* `cssProcessorOptions`: The options passed to the `cssProcessor`, defaults to `{}`\n* `cssProcessorPluginOptions`: The plugin options passed to the `cssProcessor`, defaults to `{}`\n* `canPrint`: A boolean indicating if the plugin can print messages to the console, defaults to `true`\n\n## Example:\n\n``` javascript\nvar OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style-loader', 'css-loader')\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin('styles.css'),\n    new OptimizeCssAssetsPlugin({\n      assetNameRegExp: /\\.optimize\\.css$/g,\n      cssProcessor: require('cssnano'),\n      cssProcessorPluginOptions: {\n        preset: ['default', { discardComments: { removeAll: true } }],\n      },\n      canPrint: true\n    })\n  ]\n};\n```\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/NMFR/optimize-css-assets-webpack-plugin.git"
  },
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "version": "5.0.3"
}
